{"version":3,"file":"game.bundle.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f8aa8bd29a3dae0bf78b","webpack:///src/js/engine/utils.js","webpack:///src/js/configs/index.js","webpack:///../node_modules/string-template/index.js","webpack:///src/js/engine/core/rule.js","webpack:///src/index.js","webpack:///src/js/phaser/states/index.js","webpack:///src/js/phaser/states/preloading.js","webpack:///src/js/phaser/states/loading.js","webpack:///src/js/phaser/states/mainMenu.js","webpack:///src/js/phaser/states/battle.js","webpack:///src/js/engine/collisions.js","webpack:///src/js/engine/core/layer.js","webpack:///src/js/configs/objects/index.js","webpack:///src/js/configs/objects/spells.js","webpack:///src/js/configs/objects/logic.js","webpack:///src/js/configs/objects/units.js","webpack:///src/js/configs/objects/effects.js","webpack:///src/js/configs/objects/terrain.js","webpack:///src/js/configs/objects/ui.js","webpack:///src/js/configs/rules/index.js","webpack:///src/js/configs/rules/spells.js","webpack:///src/js/configs/rules/logic.js","webpack:///src/js/configs/rules/units.js","webpack:///src/js/configs/rules/layers.js","webpack:///src/js/configs/rules/ui.js","webpack:///src/js/configs/rules/etc.js","webpack:///src/js/engine/core/object.js","webpack:///src/js/engine/renderers.js","webpack:///src/js/engine/sprite.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Game\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Game\"] = factory();\n\telse\n\t\troot[\"Game\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t__webpack_require__.p = typeof window !== 'undefined' && window.__STATICS_BASE_URL__ || __webpack_require__.p;\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f8aa8bd29a3dae0bf78b","function moveWithSpeed(point, destination, speed) {\n    if (!point || !destination) {\n        return null;\n    }\n\n    const _destination = destination.clone().normalize().multiply(speed, speed);\n\n    return Phaser.Point.add(point, _destination);\n}\n\n\nfunction clone(obj) {\n    (!obj) && (obj = {});\n    \n    return JSON.parse(JSON.stringify(obj));\n}\n\nexport default {\n    clone: clone,\n    moveWithSpeed: moveWithSpeed\n}\n\n\n// WEBPACK FOOTER //\n// src/js/engine/utils.js","import objects from './objects/index';\nimport rules from './rules/index';\n\nfunction getRuleConfig(id) {\n    return rules[id]\n}\n\nfunction getConfig(id) {\n    const config = JSON.parse(JSON.stringify(objects[id]));\n\n    (!config.id) && (config.id = id);\n\n    return config;\n}\n\nexport default {\n    getRuleConfig,\n    getConfig,\n};\n\n\n// WEBPACK FOOTER //\n// src/js/configs/index.js","var nargs = /\\{([0-9a-zA-Z]+)\\}/g\nvar slice = Array.prototype.slice\n\nmodule.exports = template\n\nfunction template(string) {\n    var args\n\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\n        args = arguments[1]\n    } else {\n        args = slice.call(arguments, 1)\n    }\n\n    if (!args || !args.hasOwnProperty) {\n        args = {}\n    }\n\n    return string.replace(nargs, function replaceArg(match, i, index) {\n        var result\n\n        if (string[index - 1] === \"{\" &&\n            string[index + match.length] === \"}\") {\n            return i\n        } else {\n            result = args.hasOwnProperty(i) ? args[i] : null\n            if (result === null || result === undefined) {\n                return \"\"\n            }\n\n            return result\n        }\n    })\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/string-template/index.js\n// module id = 2\n// module chunks = 0","import utils from '../utils';\n\n\nexport default class GameRule {\n  constructor(config) {\n    this.id = config.id;\n    this._update = config.update;\n    this.parameters = (config.parameters && utils.clone(config.parameters)) || {};\n    this._init = config.init;\n    this.inited = false;\n  }\n\n  init() {\n    if (!this.inited) {\n      this._init && this._init();\n      this.inited = true;\n    }\n  };\n\n  update(dt) {\n    this._update && this._update(dt);\n  };\n\n  setContext(context) {\n    this.context = context;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// src/js/engine/core/rule.js","import states from './js/phaser/states/index';\n\nvar game = new Phaser.Game(1024, 768, Phaser.CANVAS , 'main', null, false, false);\n\nwindow.game = game;\n\ngame.state.add('preloading', states.preLoading, true);\ngame.state.add('loading', states.loading);\ngame.state.add('battle', states.battle);\ngame.state.add('mainMenu', states.mainMenu);\n\n\n\n// WEBPACK FOOTER //\n// src/index.js","import preLoading from './preloading';\nimport loading from './loading';\nimport mainMenu from './mainMenu';\nimport battle from './battle';\n\nexport default {\n    preLoading,\n    loading,\n    mainMenu,\n    battle\n};\n\n\n// WEBPACK FOOTER //\n// src/js/phaser/states/index.js","class PreLoading extends Phaser.State {\n    preload() {\n        this.game.stage.backgroundColor = 0x0e0e0e;\n        this.game.load.image('loading', './assets/img/loading.png');\n    }\n    create() {\n        this.game.state.start('loading');\n    }\n}\n\nexport default PreLoading;\n\n\n// WEBPACK FOOTER //\n// src/js/phaser/states/preloading.js","class Loading extends Phaser.State {\n    preload() {\n        this.game.stage.backgroundColor = 0x0e0e0e;\n\n        this.text = this.add.text(460, 250,'LOADING', {\n            fill: '#efefef'\n        });\n\n        this.game.load.setPreloadSprite(this.game.add.image(400, 300, 'loading'));\n\n        this.game.load.spritesheet('button', './assets/img/buttons.png', 293, 54);\n\n        this.game.load.image('mainmenu', './assets/img/mainmenu.jpeg');\n        this.game.load.image('deathmenu', './assets/img/deathbackground.jpg');\n        this.game.load.image('bigMonsters', './assets/img/bigMonsters.png');\n        this.game.load.image('boss', './assets/img/boss.png');\n        this.game.load.image('bossSpell', './assets/img/bossSpell.png');\n        this.game.load.image('monsterBlood', './assets/img/sblood.png');\n        this.game.load.image('bloodEffect', './assets/img/bloods.png');\n        this.game.load.image('cursor', './assets/img/cursor.png');\n        this.game.load.image('darkblast', './assets/img/darkblast.png');\n        this.game.load.image('demons', './assets/img/demons.png');\n        this.game.load.image('effects', './assets/img/effects.png');\n        this.game.load.image('explosions', './assets/img/explosions.png');\n        this.game.load.image('fireball', './assets/img/fireballsprite.png');\n        this.game.load.image('hellfire', './assets/img/hellfire.png');\n        this.game.load.image('frostEffect', './assets/img/frosteffect.png');\n        this.game.load.image('pumpkin', './assets/img/heart.png');\n        this.game.load.image('hero', './assets/img/mainhero.png');\n        this.game.load.image('powerUp', './assets/img/powerup2.png');\n        this.game.load.image('arcaneGate', './assets/img/spell.png');\n        this.game.load.image('spellIcons', './assets/img/spellicons.png');\n        this.game.load.image('stone', './assets/img/stones.png');\n        this.game.load.image('terrain', './assets/img/terrain.png');\n        this.game.load.image('tree1', './assets/img/tree1.png');\n        this.game.load.image('tree2', './assets/img/tree2.png');\n\n        this.game.load.audio('menuTheme', './assets/music/menu.mp3');\n        this.game.load.audio('deathTheme', './assets/music/death.mp3');\n        this.game.load.audio('battleTheme', './assets/music/battle.mp3');\n    }\n\n    create() {\n        this.text.destroy();\n        this.game.state.start('mainMenu');\n    }\n\n}\n\nexport default Loading;\n\n\n// WEBPACK FOOTER //\n// src/js/phaser/states/loading.js","class MainMenu extends Phaser.State {\n    init() {\n        this.menuTheme = this.sound.add('menuTheme', 0.3, true);\n        this.background = this.game.add.image(512, 768, 'mainmenu');\n        this.background.anchor.set(0.5, 1);\n        this.background.alpha = 0.8;\n    }\n    \n    create() {\n        this.generateControls();\n\n        this.menuTheme.play();\n    }\n\n    generateControls() {\n      const button  = this.add.button(512, 384, 'button', this.startGame, this, 2, 0 , 1, 2);\n      const start = this.add.text(0, 3,'START', {\n            fill: '#efefef'\n        });\n      const info = this.add.text(-300, -300, ' MOVING: WASD\\n AIM: MOUSE\\n CAST SPELL: MOUSE CLICK OR SPACE\\n SELECT SPELL: 1, 2, 3.', {\n            fontSize : '20px',\n            fill: '#efefef'\n        });\n\n        start.anchor.setTo(0.5, 0.5);\n        info.anchor.setTo(0.5, 0.5);\n        button.anchor.setTo(0.5, 0.5);\n\n        button.addChild(start);\n        button.addChild(info);\n    }\n\n    startGame() {\n        this.game.state.start('battle');\n    }\n\n    shutdown() {\n        this.menuTheme.stop();\n    }\n}\n\nexport default MainMenu;\n\n\n// WEBPACK FOOTER //\n// src/js/phaser/states/mainMenu.js","import collisions from '../../engine/collisions';\nimport GameLayer from '../../engine/core/layer';\n\nclass GameState extends Phaser.State {\n    init() {\n        this.battleTheme = this.sound.add('battleTheme', 0.3, true);\n        this.deathTheme = this.sound.add('deathTheme', 0.3, true);\n    }\n\n    create() {\n        this.pauseFlag = false;\n\n        this.collisions = collisions({\n            n: 6,\n            width: 1500,\n            height: 1200\n        });\n\n        this.initGameParameters();\n        this.initGameLayer();\n        this.initControls();\n\n        this.battleTheme.play();\n    }\n\n    initControls() {\n        this.restartButton = this.add.button(512, 384, 'button', this.restart, this, 2, 0 , 1, 2);\n\n        this.restartButton.addChild(this.add.text(-65, -15, 'RESTART', {\n            fill: '#efefef'\n        }));\n        this.restartButton.addChild(this.add.text(-70, -70, 'YOU DIED!', {\n            fill: '#EF0000'\n        }));\n\n        this.restartButton.anchor.setTo(0.5, 0.5);\n        this.restartButton.kill();\n    }\n\n    initGameParameters() {\n        this.parameters = {};\n        this.parameters.bestTime = localStorage.getItem('bestTime') || 0;\n        this.parameters.bestScore = localStorage.getItem('bestScore') || 0;\n    }\n\n    initGameLayer() {\n        this.bitmap = this.add.bitmapData(this.game.canvas.width, this.game.canvas.height, 'battleBitmap');\n\n        this.image = this.add.image(0, 0, this.bitmap);\n\n      const layerConfig = {\n            id: 'mainLayer',\n            size : [1324,1068],\n            background: 'terrain',\n            initList : ['player', 'cursor', 'counter', 'timer', 'bestTime', 'fireballSpell', 'hellfireSpell', 'frostShardSpell', 'teleportSpell', 'bestScore', 'level','fog', 'monsterController'],\n            init: function() {\n                this.state.parameters.monstersKilled = 0;\n                this.state.parameters.gameTimer = 0;\n            },\n            translate: {\n                x: -150,\n                y: -150\n            },\n            state: this,\n            ctx: this.bitmap.ctx,\n            rules: ['random_trees' ,'spawn_heart','spawn_powerup', 'goWithPlayer']\n        };\n\n        this.gameLayer = new GameLayer(layerConfig);\n        this.gameLayer.init();\n    }\n\n    stopBattle() {\n        this.processGameParameters();\n        this.battleTheme.stop();\n        this.deathTheme.play();\n        this.restartButton.revive();\n        this.pauseFlag = true;\n    }\n    \n    processGameParameters() {\n        if (this.parameters.gameTimer > this.parameters.bestTime) {\n            this.parameters.bestTime = this.parameters.gameTimer;\n\n            localStorage.setItem('bestTime', this.parameters.bestTime);\n        }\n        if (this.parameters.monstersKilled > this.parameters.bestScore) {\n            this.parameters.bestScore = this.parameters.monstersKilled;\n\n            localStorage.setItem('bestScore', this.parameters.bestScore);\n        }\n    }\n    \n    prepareForRender() {\n        if (this.pauseFlag === true) {\n            this.gameLayer.render(0);\n            this.bitmap.rect(0, 0, this.game.canvas.width, this.game.canvas.height, 'rgba(10,0,0,0.5)');\n        } else {\n            this.gameLayer.update(this.game.time.physicsElapsed);\n            this.gameLayer.render(this.game.time.physicsElapsed);\n        }\n    }\n\n    restart() {\n        this.pauseFlag = false;\n\n        this.battleTheme.play();\n        this.deathTheme.stop();\n        \n        this.collisions.clear();\n\n        this.restartButton.kill();\n\n        this.gameLayer.clearLayer();\n        this.gameLayer.init();\n    }\n\n    update() {\n        this.prepareForRender();\n    }\n}\n\nexport default GameState;\n\n\n// WEBPACK FOOTER //\n// src/js/phaser/states/battle.js","function generate(config) {\n  const n = config.n || 6;\n  const width = config.width || 800;\n  const height = config.height || 600;\n  const sizeX = (width) >> n;\n  const sizeY = (height) >> n;\n  const cellGrid = new Array(sizeX * sizeY);\n\n  generateMap();\n\n  function generateMap() {\n    for (let i = 0; i < cellGrid.length; i++) {\n      cellGrid[i] = [];\n    }\n  }\n\n  function getCell(point) {\n    return (point[0]) + point[1] * sizeY;\n  }\n\n  function removeObject(object){\n    const oldCells = object.getParameter('collisions').cells;\n\n    for (let i = 0; i < oldCells.length; i++) {\n        cellGrid[oldCells[i]] && cellGrid[oldCells[i]].splice(cellGrid[oldCells[i]].indexOf(object), 1);\n    }\n}\n\n  function getPointsOfObject(object) {\n    const pos = object.pos;\n    const size = object.size;\n    const cells = [];\n    const xIndex = size[0] >> n;\n    const yIndex = size[1] >> n;\n\n    for (let i = 0; i < 2 + xIndex; i++) {\n        for (let j = 0; j < 2 + yIndex; j++) {\n            cells.push(getCell([\n                (pos.x - size[0] / 2 + i * (size[0] / (1 + xIndex))) >> n,\n                (pos.y - size[1] / 2 + j * (size[1] / (1 + yIndex))) >> n\n            ]));\n        }\n    }\n\n    return cells;\n  }\n\n  function updateObject(object) {\n    const cells = getPointsOfObject(object);\n    const oldCells = object.getParameter('collisions').cells;\n\n    for (let i = 0; i < cells.length; i++) {\n      if (oldCells[i] !== cells[i]) {\n        cellGrid[oldCells[i]] && cellGrid[oldCells[i]].splice(cellGrid[oldCells[i]].indexOf(object), 1);\n        cellGrid[cells[i]] && (cellGrid[cells[i]].indexOf(object) === -1) && cellGrid[cells[i]].push(object);\n        oldCells[i] = cells[i];\n      } else {\n        cellGrid[cells[i]] && (cellGrid[cells[i]].indexOf(object) === -1) && cellGrid[cells[i]].push(object);\n      }\n    }\n  }\n\n  function checkCollisions() {\n    for (let i = 0; i <= sizeX; i++) {\n      for (let j = 0; j <= sizeY; j++) {\n        if (cellGrid[getCell([i, j])]) {\n          const objects = cellGrid[getCell([i, j])];\n          const length = objects.length;\n\n          for (let k = 0; k < length; k++) {\n            for (let l = k + 1; l < length; l++) {\n              if (boxCollides(objects[k].pos, objects[k].size, objects[l].pos, objects[l].size)) {\n                (objects[k].getParameter('collisions').indexOf(objects[l]) === -1) && objects[k].getParameter('collisions').push(objects[l]);\n                (objects[l].getParameter('collisions').indexOf(objects[k]) === -1) && objects[l].getParameter('collisions').push(objects[k]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function boxCollides(pos, size, pos2, size2) {\n    function collides(x, y, r, b, x2, y2, r2, b2) {\n      return !(r >= x2 || x < r2 ||\n        b >= y2 || y < b2);\n    }\n\n    return collides(\n      pos.x + size[0] / 2, pos.y + size[1] / 2,\n      pos.x  - size[0] / 2, pos.y  - size[1] / 2,\n      pos2.x  + size2[0] / 2, pos2.y  + size2[1] / 2,\n      pos2.x  - size2[0] / 2, pos2.y  - size2[1] / 2\n    );\n  }\n\n  return {\n    cellGrid: cellGrid,\n    updateObject: updateObject,\n    removeObject: removeObject,\n    check: checkCollisions,\n    clear: generateMap\n  };\n}\n\nexport default generate;\n\n\n// WEBPACK FOOTER //\n// src/js/engine/collisions.js","import utils from '../utils';\nimport gameConfigs from '../../configs';\n\nimport GameObject from './object';\nimport GameRule from './rule';\n\n\nexport default class GameLayer {\n  constructor(config) {\n    this.objectCount = 0;\n    this.id = config.id;\n    this.state = config.state;\n    this.game = this.state.game;\n    this.ctx = config.ctx;\n    this.initList = config.initList;\n    this.background = this.ctx.createPattern(this.game.cache.getImage(config.background), 'repeat');\n    this.pos = config.pos ? new Phaser.Point(config.pos[0], config.pos[1]) : new Phaser.Point(0, 0);\n    this.size = config.size || [config.ctx.canvas.width, config.ctx.canvas.height];\n    this.defaultTranslate = config.translate || {\n        x: 0,\n        y: 0\n      };\n    this.sortedObjects = {\n      'default': []\n    };\n    this.objects = {};\n    this._rules = config.rules || [];\n    this._init = config.init;\n    this.inited = false;\n  }\n\n  init() {\n    if (!this.inited) {\n      this.translate = utils.clone(this.defaultTranslate);\n      for (let i = 0; i < this.initList.length; i++) {\n        this.addObject(gameConfigs.getConfig(this.initList[i]));\n      }\n\n      this._init && this._init();\n\n      const rules = this._rules;\n      this.rules = [];\n\n      for (let i = 0, l = rules.length; i < l; i++) {\n        this.addRule(gameConfigs.getRuleConfig(rules[i]));\n      }\n\n      this.inited = true;\n    }\n  };\n\n  render(dt) {\n    if (!this.inited) return;\n\n    const arr = {};\n    const ctx = this.ctx;\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(this.pos.x, this.pos.y, this.size[0], this.size[1]);\n    ctx.clip();\n    ctx.translate(this.translate.x, this.translate.y);\n    ctx.fillStyle = this.background;\n    ctx.fillRect(0, 0, this.size[0] + 5, this.size[1] + 5);\n\n    for (let i in this.objects) {\n      if (this.objects.hasOwnProperty(i)) {\n        (arr[this.objects[i].zIndex]) || (arr[this.objects[i].zIndex] = []);\n        arr[this.objects[i].zIndex].push(this.objects[i]);\n      }\n    }\n    for (let i in arr) {\n      if (arr[i]) {\n        for (let j = 0, k = arr[i].length; j < k; j++) {\n          ctx.save();\n          ctx.translate(Math.round(arr[i][j].pos.x), Math.round(arr[i][j].pos.y));\n\n          arr[i][j].render(dt);\n\n          ctx.restore();\n        }\n      }\n    }\n    ctx.translate(-this.translate.x, -this.translate.y);\n    ctx.restore();\n  };\n\n  update(dt) {\n    if (!this.inited) return;\n\n    for (let i in this.rules) {\n      this.rules.hasOwnProperty(i) && this.rules[i].update(dt);\n    }\n\n    for (let i in this.objects) {\n      this.objects[i].update(dt);\n    }\n\n    for (let i in this.objects) {\n      this.objects[i].updateCollisions(dt);\n    }\n\n    this.state.collisions.check();\n\n    for (let i in this.objects) {\n      this.objects[i].updateConditions(dt);\n    }\n\n    for (let i in this.objects) {\n      if (this.objects[i]._removeInNextTick) {\n        this.objects[i].collisions && this.state.collisions.removeObject(this.objects[i]);\n        this.removeObject(this.objects[i].id);\n      }\n    }\n  };\n\n  addRule(config) {\n    const rule = new GameRule(config);\n    rule.setContext(this);\n    rule.init();\n    this.rules.push(rule);\n  };\n\n  removeObject(id) {\n    if (this.objects.hasOwnProperty(id)) {\n      this.objects[id].layer = null;\n\n      if (this.objects[id].type && this.objects[id].type !== 'default') {\n        this.sortedObjects[this.objects[id].type].splice(this.sortedObjects[this.objects[id].type].indexOf(id), 1);\n      } else {\n        this.sortedObjects['default'].splice(this.sortedObjects['default'].indexOf(id), 1);\n      }\n      this.objects[id] = null;\n\n      delete this.objects[id];\n    }\n  };\n\n  addObject(config) {\n    if (this.objects.hasOwnProperty(config.id)) {\n      console.error('Object with such id already exist in this layer: ', config.id);\n      return false;\n    }\n    config.layer = this;\n    config.id += (this.objectCount++) + Math.round((new Date()).getTime() + Math.random() * 1000001);\n\n    const _obj = new GameObject(config);\n    _obj.init();\n\n    if (config.type && config.type !== 'default') {\n      (!this.sortedObjects[config.type]) && (this.sortedObjects[config.type] = []);\n      this.sortedObjects[config.type].push(_obj.id);\n    } else {\n      this.sortedObjects['default'].push(_obj.id);\n    }\n\n    this.objects[_obj.id] = _obj;\n\n    return this.objects[_obj.id];\n  };\n\n  getObjectsByType(type) {\n    const objectsId = this.sortedObjects[type] || [];\n    const result = [];\n\n    for (let i = 0, l = objectsId.length; i < l; i++) {\n      result.push(this.objects[objectsId[i]]);\n    }\n    return result;\n  };\n\n  clearLayer() {\n    this.objects = [];\n\n    this.sortedObjects = {\n      default: []\n    };\n\n    this.rules = [];\n\n    this.inited = false;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/js/engine/core/layer.js","import spells from './spells';\nimport logic from './logic';\nimport units from './units';\nimport effects from './effects';\nimport terrain from './terrain';\nimport ui from './ui';\n\nvar objects = {};\n\nObject.assign(objects, logic);\nObject.assign(objects, spells);\nObject.assign(objects, units);\nObject.assign(objects, effects);\nObject.assign(objects, ui);\nObject.assign(objects, terrain);\n\nexport default objects;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/objects/index.js","var config = {\n    fireballSpell: {\n        zIndex : 5000,\n        sprite: ['spellIcons', [0, 0], [32, 32]],\n        pos : [449, 748],\n\n        size : [32, 32],\n        render : 'spell',\n        parameters : {\n            bulletsFired: 0,\n            cooldown: 20\n        },\n        type : 'spell',\n        rules : ['fireball']\n    },\n    hellfireSpell: {\n        zIndex : 5000,\n        sprite: ['spellIcons', [96, 0], [32, 32]],\n        pos : [491, 748],\n\n        size : [32, 32],\n        render : 'spell',\n        parameters : {\n            bulletsFired: 0,\n            cooldown: 800,\n        },\n        type : 'spell',\n        rules : ['hellfire']\n    },\n    frostShardSpell: {\n        zIndex : 5000,\n        sprite: ['spellIcons', [224, 96], [32, 32]],\n        pos : [533, 748],\n        size : [32, 32],\n        render : 'spell',\n        parameters : {\n            shardsFired: 0,\n            cooldown: 500,\n        },\n        type : 'spell',\n        rules : ['frostShard']\n    },\n    teleportSpell: {\n        zIndex : 5000,\n        sprite: ['spellIcons', [64, 32], [32, 32]],\n        pos : [575, 748],\n        size : [32, 32],\n        render : 'spell',\n        parameters : {\n            power : 200,\n            teleportGates : 0,\n            cooldown: 200\n        },\n        type : 'spell',\n        rules : ['teleport']\n    },\n    teleportGate: {\n        zIndex : 0,\n        render: 'object',\n        sprite: ['arcaneGate', [0, 0], [32, 32], 7, [0,1]],\n        pos : [466, 580],\n        size : [32, 32],\n        parameters : {\n            cooldown: 200\n        },\n        type : 'spellElement',\n        rules : ['removeOnCooldown', 'dynamicZIndex']\n    },\n\n    bullet : {\n        zIndex : 3,\n        collisions: true,\n        render: 'object',\n        sprite: ['fireball',[ 0, 0], [33, 33], 16, [0, 1, 2, 3]],\n        size : [25, 25],\n        type : 'spellElement',\n        parameters : {\n            power : 10,\n            cooldown: 100,\n            speed: 300\n        },\n        conditions: ['bulletMonsterCollision'],\n        rules : ['destroyAfterLeavingLayer', 'moveToDirection', 'dynamicZIndex' , 'explosionOnCooldown']\n    },\n    hellfireTube : {\n        zIndex : 3,\n        collisions: true,\n        render: 'object',\n        sprite: ['hellfire',[ 0, 0], [21, 58], 14, [0, 1, 2, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4], null, true],\n        size : [50, 50],\n        type : 'spellElement',\n        parameters : {\n            power : 10,\n            cooldown: 25,\n            speed: 300\n        },\n        conditions: ['hellTubeMonsterCollision'],\n        rules : ['dynamicZIndex' , 'explosionAfterSpriteDone']\n    },\n    frostShard : {\n        zIndex : 3,\n        render: 'object',\n        collisions: true,\n        sprite: ['effects',[96, 0], [32, 32], 10, [0, 1, 2]],\n        type : 'spellElement',\n        size : [500, 500],\n        parameters : {\n            power : 60,\n            cooldown: 200\n        },\n        conditions: ['slowEnemies'],\n        rules : ['removeOnCooldown', 'dynamicZIndex']\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/objects/spells.js","var config = {\n    monsterController : {\n        render : false,\n        collisions: false,\n        type : 'monsterController',\n        rules : ['monsterController'],\n        parameters: {\n            monsterCount: [10, 25, 50, 75, 100, 150, 200, 500, 1000, 2500, 5000, 10000],\n            monsterCooldown: 7\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/objects/logic.js","var config = {\n    player : {\n        zIndex : 20,\n        sprite: ['hero', [0, 0], [32, 32], 6, [0, 1, 2]],\n        pos : [662, 534],\n        size : [25, 32],\n        render : 'unit',\n        collisions: true,\n        parameters : {\n            speed : 150,\n            health : 50,\n            spellPower: 1,\n            level : 1,\n            exp: 0,\n            effects : [],\n            currentSpell: 'fireball',\n            direction : {},\n            levelTable: {\n                1 : 600,\n                2 : 1200,\n                3 : 2000,\n                4 : 3000,\n                5 : 4500,\n                6 : 6500,\n                7 : 9000,\n                8 : 13000,\n                9 : 20000\n            }\n        },\n        type : 'player',\n        conditions: ['selectSpellWithKeyboard'],\n        rules : ['moveWithKeyboard', 'rotateToMouse', 'bindPositionToLayer', 'playerDeath', 'moveToDirection','dynamicZIndex', 'resetSpeed', 'resetEffects', 'playerLevelUp']\n    },\n    summonGate: {\n        zIndex : 0,\n        render: 'object',\n        sprite: ['arcaneGate', [0, 0], [32, 32], 7, [0,1]],\n        pos : [466, 580],\n        size : [25, 30],\n        collisions: true,\n        parameters : {\n            cooldown: 80,\n            exp: 3,\n            chanceOfBoss : 5,\n            chanceOfBoss2 : 8,\n            chanceOfBoomer : 20,\n            health : 10\n        },\n        conditions : ['monsterHealthStatus'],\n        type : 'monster',\n        rules : ['summonOnCooldown', 'dynamicZIndex']\n    },\n    monster : {\n        zIndex : 1,\n        sprite: ['demons', [0, 128], [32, 32], 6, [0, 1, 2]],\n        size : [20,28],\n        collisions: true,\n        render : 'unit',\n        parameters : {\n            speed : 25,\n            cooldown : 70 ,\n            scentSpeed: 120,\n            scentRange: 600,\n            exp: 15,\n            wanderCooldown: 500,\n            effects : [],\n            health : 20,\n            power : 5\n        },\n        conditions : [ 'monsterHealthStatus', 'stopOnCollisionWithPlayer'],\n        type : 'monster',\n        rules : ['moveToDirection', 'wandererAI', 'rotateByDirection', 'meleeAttack', 'dynamicZIndex', 'resetEffects', 'resetMeleeCooldown']\n    },\n    monsterBoomer : {\n        zIndex : 1,\n        sprite: ['demons', [96, 128], [32, 32], 6, [0, 1, 2]],\n        size : [20,28],\n        collisions: true,\n        render : 'unit',\n        parameters : {\n            speed : 100,\n            exp : 30,\n            effects : [],\n            health : 10,\n            power : 10\n        },\n        conditions : ['monsterHealthStatus', 'monsterExplosionCondition'],\n        type : 'monster',\n        rules : ['moveToDirection', 'rotateByPlayer', 'setDirectionToPlayerAdvance', 'dynamicZIndex', 'resetSpeed', 'resetEffects']\n    },\n    monsterBoss : {\n        zIndex : 1,\n        collisions: true,\n        sprite: ['bigMonsters', [0, 0], [32, 50], 6, [0, 1, 2]],\n        size : [25, 40],\n        render : 'unit',\n        parameters : {\n            speed : 50,\n            exp : 60,\n            cooldown : 75,\n            power : 10,\n            health : 50,\n            effects : []\n        },\n        conditions : ['monsterHealthStatus' , 'stopOnCollisionWithPlayer'],\n        type : 'monster',\n        rules : ['setDirectionToPlayer', 'monsterBossLogic', 'moveToDirection', 'rotateByDirection', 'dynamicZIndex', 'resetSpeed', 'resetEffects', 'resetRangeCooldown']\n    },\n    monsterBoss2 : {\n        zIndex : 1,\n        collisions: true,\n        sprite: ['boss', [0, 0], [96, 48], 6, [0, 1, 2]],\n        size : [40, 45],\n        render : 'unit',\n        parameters : {\n            speed : 15,\n            cooldown : 200 ,\n            exp: 120,\n            fireRange : 300,\n            power : 10,\n            health : 30,\n            effects : []\n        },\n        conditions : ['monsterHealthStatus' , 'stopOnCollisionWithPlayer'],\n        type : 'monster',\n        rules : ['setDirectionToPlayer', 'monsterBoss2Logic', 'rotateByDirection', 'dynamicZIndex', 'resetSpeed', 'resetEffects', 'resetRangeCooldown']\n    },\n    heart : {\n        zIndex : 3,\n        render: 'object',\n        collisions: true,\n        size: [25, 25],\n        sprite : ['pumpkin', [0, 0], [32, 32], 5, [0,1]],\n        conditions: ['triggerOnPlayerCollision'],\n        rules: ['dynamicZIndex'],\n        parameters : {\n            power : 10\n        }\n    },\n    powerup : {\n        zIndex : 2,\n        size: [25, 25],\n        collisions: true,\n        sprite : ['powerUp', [0, 0], [72, 65], 15, [0, 1, 2, 1]],\n        conditions: ['triggerOnPlayerCollisionPowerUp'],\n        parameters : {\n            exp: 250\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/objects/units.js","var config = {\n    mbullet : {\n        zIndex : 3,\n        collisions: true,\n        sprite: ['darkblast', [0, 0], [38, 38], 12, [0, 1, 2 ,3]],\n        type : 'monsterSpellElement',\n        render: 'object',\n        size : [32, 32],\n        conditions : ['damageOnPlayerCollision', 'destroyOnPlayerCollision'],\n        parameters : {\n            power : 8,\n            speed: 100\n        },\n        rules : ['destroyAfterLeavingLayer', 'moveToDirection', 'dynamicZIndex']\n    },\n    mbullet2 : {\n        zIndex : 3,\n        collisions: true,\n        sprite: ['bossSpell', [0, 0], [30, 26], 10, [0, 1, 2]],\n        type : 'monsterSpellElement',\n        render: 'object',\n        size : [28, 24],\n        conditions : ['monsterBoss2Bullet'],\n        parameters : {\n            power : 15,\n            cooldown: 100,\n            speed: 200\n        },\n        rules : ['destroyAfterLeavingLayer', 'setDirectionToPlayer', 'rotateByDirection', 'moveToDirection', 'dynamicZIndex']\n    },\n    blood : {\n        zIndex : 2,\n        sprite : ['monsterBlood', [0, 0], [32, 13]],\n        parameters : {\n            cooldown : 500\n        },\n        rules: ['removeOnCooldown']\n    },\n    bloodSpray : {\n        zIndex : 2,\n        sprite : ['bloodEffect', [0, 0], [64, 64], 15, [0, 1, 2, 3, 4], null, true, 0.785],\n        rules: ['destroyAfterSpriteDone', 'dynamicZIndex']\n    },\n    explosion : {\n        render: 'object',\n        size : [39, 39],\n        sprite: ['explosions', [0, 0], [39, 39], 16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], null, true],\n        rules: ['destroyAfterSpriteDone', 'dynamicZIndex']\n    },\n    monsterExplosion : {\n        render: 'object',\n        collisions: true,\n        type : 'spellEffect',\n        conditions : ['monsterExplosion'],\n        size : [39, 39],\n        sprite: ['explosions', [0, 0], [39, 39], 16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], null, true],\n        rules: ['destroyAfterSpriteDone', 'dynamicZIndex']\n    },\n    fog : {\n        render: 'fog',\n        zIndex: 2500,\n        type : 'effect'\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/objects/effects.js","var config = {\n    tree1 : {\n        sprite : ['tree1', [0, 0], [62, 87]],\n        size : [62, 88],\n        rules: ['dynamicZIndex']\n    },\n    tree2 : {\n        sprite : ['tree2', [0, 0], [59, 87]],\n        size : [60, 88],\n        rules: ['dynamicZIndex']\n    },\n    stones : {\n        render: 'object',\n        sprite : ['stone', [0, 0], [25, 22]],\n        size : [15, 22],\n        rules : ['dynamicZIndex']\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/objects/terrain.js","var config = {\n    cursor : {\n        zIndex : 3000,\n        render: 'ui',\n        pos: [400,350],\n        sprite : ['cursor', [0, 0], [30, 30]],\n        rules: ['bindPositionToMouse']\n    },\n    counter: {\n        zIndex : 3000,\n        pos: [5, 13],\n        render : \"text\",\n        parameters : {\n            weight : \"bold\",\n            color : \"#DAA520\",\n            template : \"SCORE: {kills}\",\n            size : 14\n        },\n        rules: ['countMonsterKilled']\n    },\n    leftOnWaveLabel: {\n        zIndex : 3000,\n        pos: [5, 100],\n        render : \"text\",\n        parameters : {\n            weight : \"bold\",\n            color : \"#DAA520\",\n            template : \"LEFT ON THIS WAVE: {count}\",\n            size : 14\n        }\n    },\n    level: {\n        zIndex : 3000,\n        pos: [35, 45],\n        render : \"expBar\",\n        parameters : {\n            weight : \"bold\",\n            color : \"#EFEFEF\",\n            template : \"LEVEL: {level}\",\n            size : 14\n        },\n        rules: ['level']\n    },\n    timer: {\n        zIndex : 3000,\n        pos: [5, 23],\n        render : \"text\",\n        parameters : {\n            weight : \"bold\",\n            color : \"#DAA520\",\n            template : \"TIMER: {time}\",\n            size : 14\n        },\n        rules: ['timer']\n    },\n    bestTime: {\n        pos: [5, 370],\n        zIndex : 3000,\n        render : \"text\",\n        parameters : {\n            weight : \"bold\",\n            color : \"#DAA520\",\n            size : 14,\n            template : \"BEST TIME: {time}\"\n        },\n        rules: ['bestTime']\n    },\n    bestScore: {\n        pos: [5, 380],\n        zIndex : 3000,\n        render : \"text\",\n        parameters : {\n            weight : \"bold\",\n            color : \"#DAA520\",\n            size : 14,\n            template : \"BEST SCORE: {score}\"\n        },\n        rules: ['bestScore']\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/objects/ui.js","import spells from './spells'\nimport logic from './logic';\nimport units from './units';\nimport layers from './layers';\nimport ui from './ui';\nimport etc from './etc';\n\nvar rules = {};\n\nObject.assign(rules, logic);\nObject.assign(rules, spells);\nObject.assign(rules, units);\nObject.assign(rules, layers);\nObject.assign(rules, ui);\nObject.assign(rules, etc);\n\nexport default rules;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/rules/index.js","import utils from './../../engine/utils';\nimport gameConfigs from '../../configs/index';\n\nvar config = {\n    fireball : {\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n            var fireCooldown = obj.getParameter('fireCooldown');\n\n            if (player.getParameter('currentSpell') == 'fireball') {\n                if (obj.layer.game.input.mousePointer.isDown || obj.layer.game.input.keyboard.isDown(32)) {\n                    if (!fireCooldown) {\n                        var destination  = new Phaser.Point(obj.layer.game.input.mousePointer.x, obj.layer.game.input.mousePointer.y);\n                        var spellPower = player.getParameter('spellPower');\n                        var startDegree = 10 * (spellPower - 1);\n\n                        destination.x -= obj.layer.translate.x;\n                        destination.y -= obj.layer.translate.y;\n\n                        for (var i = 0; i < spellPower; i++) {\n                            let movedPoint = destination.clone().rotate(player.pos.x, player.pos.y, startDegree, true);\n\n                            createBullet(Phaser.Point.subtract(movedPoint, player.pos), movedPoint.clone());\n\n                            startDegree -= 20;\n                        }\n\n                        obj.setParameter('cooldown', obj.getDefaultParameter('cooldown'));\n                        obj.setParameter('fireCooldown', obj.getParameter('cooldown'));\n\n                        function createBullet(direction, destination) {\n                            var bulletConfig = gameConfigs.getConfig('bullet');\n                            bulletConfig.pos = player.pos.clone();\n\n                            var bull = obj.layer.addObject(bulletConfig);\n                            bull.setParameter('direction', direction);\n                            bull.setParameter('power', bull.getParameter('power') + 5 * (spellPower - 1));\n                            bull.sprite.setDegree(player.pos.angle(destination));\n                        }\n                    }\n                }\n            }\n            fireCooldown && obj.setParameter('fireCooldown', fireCooldown - 1);\n        }\n\n    },\n    hellfire : {\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n            var fireCooldown = obj.getParameter('fireCooldown');\n\n            if (player.getParameter('currentSpell') == 'hellfire') {\n                if (obj.layer.game.input.mousePointer.isDown || obj.layer.game.input.keyboard.isDown(32)) {\n                    if (!fireCooldown) {\n                        var destination  = new Phaser.Point(0, 1),\n                            point1 = utils.moveWithSpeed(player.pos, destination, 100),\n                            spellPower = player.getParameter('spellPower');\n\n                        for (var i = -10; i < 10; i++) {\n                            let movedPoint = point1.clone().rotate(player.pos.x, player.pos.y, 18 * i, true);\n\n                            createTube(movedPoint);\n                        }\n\n                        obj.setParameter('cooldown', obj.getDefaultParameter('cooldown'));\n                        obj.setParameter('fireCooldown', obj.getParameter('cooldown'));\n\n                        function createTube(pos) {\n\n                            var tubeConfig = gameConfigs.getConfig('hellfireTube');\n                            tubeConfig.pos = pos;\n\n                            var tube = obj.layer.addObject(tubeConfig);\n                            tube.setParameter('power', tube.getParameter('power') + 5 * (spellPower - 1));\n                        }\n                    }\n                }\n            }\n            fireCooldown && obj.setParameter('fireCooldown', fireCooldown - 1);\n        }\n\n    },\n    slowEnemies : {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].type == 'monster') {\n                    var speed = objects[i].getParameter('speed');\n                    var power = obj.getParameter('power');\n                    var effects = objects[i].getParameter('effects') || [];\n\n                    if (speed < power) {\n                        objects[i].setParameter('speed', 0);\n                    } else {\n                        objects[i].setParameter('speed', speed - power);\n                    }\n\n                    if (effects.indexOf('frozen') == -1) {\n                        effects.push('frozen');\n                    }\n                }\n            }\n        }\n    },\n    teleport : {\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n            var fireCooldown = obj.getParameter('fireCooldown');\n\n            if (player.getParameter('currentSpell') == 'teleport') {\n                if (obj.layer.game.input.mousePointer.isDown || obj.layer.game.input.keyboard.isDown(32)) {\n                    if (!fireCooldown) {\n                        var mouse  = new Phaser.Point(obj.layer.game.input.mousePointer.x, obj.layer.game.input.mousePointer.y);\n\n                        mouse.x -= obj.layer.translate.x;\n                        mouse.y -= obj.layer.translate.y;\n\n                        var direction = Phaser.Point.subtract(mouse, player.pos);\n                        var spellPower = player.getParameter('spellPower');\n                        var destination = utils.moveWithSpeed(player.pos, direction, obj.getParameter('power'));\n                        var cooldown = obj.getDefaultParameter('cooldown', cooldown) - (30 * (spellPower - 1));\n                        var teleportGate;\n\n                        teleportGate = gameConfigs.getConfig('teleportGate');\n                        teleportGate.pos = player.pos.clone();\n\n                        obj.layer.addObject(teleportGate);\n\n                        teleportGate = gameConfigs.getConfig('teleportGate');\n                        teleportGate.pos = destination.clone();\n\n                        obj.layer.addObject(teleportGate);\n\n                        player.setPosition(destination);\n\n                        obj.setParameter('cooldown', (cooldown > 50) ? cooldown : 50);\n                        obj.setParameter('fireCooldown', obj.getParameter('cooldown'));\n                    }\n                }\n            }\n            fireCooldown && obj.setParameter('fireCooldown', fireCooldown - 1);\n        }\n    },\n    frostShard : {\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n            var fireCooldown = obj.getParameter('fireCooldown');\n\n            if (player.getParameter('currentSpell') == 'frostShard') {\n                if (obj.layer.game.input.mousePointer.isDown || obj.layer.game.input.keyboard.isDown(32)) {\n                    if (!fireCooldown) {\n                        var frostShard = gameConfigs.getConfig('frostShard');\n                        var mousePosition = new Phaser.Point(obj.layer.game.input.mousePointer.x, obj.layer.game.input.mousePointer.y);\n                        var spellPower = player.getParameter('spellPower');\n                        var destination = mousePosition.clone();\n\n                        destination.x -= obj.layer.translate.x;\n                        destination.y -= obj.layer.translate.y;\n\n                        frostShard.pos = destination.clone();\n\n                        var spellPowerBoost = 0;\n\n                        for (var i = 1; i < spellPower; i++) {\n                            spellPowerBoost += 50;\n                        }\n\n                        var fs = obj.layer.addObject(frostShard);\n\n                        fs.setParameter('cooldown', fs.getParameter('cooldown') + spellPowerBoost);\n\n                        obj.setParameter('fireCooldown', obj.getParameter('cooldown'));\n\n                    }\n                }\n            }\n            fireCooldown && obj.setParameter('fireCooldown', fireCooldown - 1);\n        }\n    },\n    bulletMonsterCollision: {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0, l = objects.length; i < l; i++) {\n                if (objects[i].type == 'monster') {\n                    objects[i].setParameter('health', objects[i].getParameter('health') - obj.getParameter('power'));\n\n                    var blood = gameConfigs.getConfig('bloodSpray');\n\n                    blood.pos = objects[i].pos.clone();\n                    blood.pos.x += 2;\n                    blood.pos.y += - 10;\n                    obj.layer.addObject(blood);\n\n                    obj._removeInNextTick = true;\n\n                    break;\n                }\n            }\n        }\n    },\n    hellTubeMonsterCollision: {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0, l = objects.length; i < l; i++) {\n                if (objects[i].type == 'monster') {\n                    objects[i].setParameter('health', objects[i].getParameter('health') - obj.getParameter('power'));\n\n                    var blood = gameConfigs.getConfig('bloodSpray');\n\n                    blood.pos = objects[i].pos.clone();\n                    blood.pos.x += 2;\n                    blood.pos.y += - 10;\n                    \n                    obj.layer.addObject(blood);\n\n                    break;\n                }\n            }\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/rules/spells.js","import format from 'string-template';\nimport gameConfigs from '../../configs/index';\n\nvar config = {\n    monsterController : {\n        init: function() {\n            var obj = this.context;\n\n            obj.setParameter('currentWave', 1);\n            obj.setParameter('monsterOnWave', this.parameters.monsterCount[ obj.getParameter('currentWave') - 1]);\n            obj.setParameter('monsterKilled', 0);\n            obj.setParameter('monsterSpawned', 0);\n            \n            this.leftOnWave = this.context.layer.addObject(gameConfigs.getConfig('leftOnWaveLabel'));\n        },\n        update: function () {\n            var obj = this.context;\n\n            function createSpawn() {\n                const rect = new Phaser.Rectangle(100 - obj.layer.translate.x,  100 - obj.layer.translate.y, 800 - obj.layer.translate.x, 550 - obj.layer.translate.y);\n                var summonGate = gameConfigs.getConfig('summonGate');\n\n                summonGate.pos = new Phaser.Point(rect.randomX,rect.randomY);\n                summonGate.pos.x = Math.min(1100, Math.max(50, summonGate.pos.x));\n                summonGate.pos.y = Math.min(900, Math.max(50, summonGate.pos.y));\n                obj.layer.addObject(summonGate);\n            }\n\n            if (obj.getParameter('monsterSpawned') < obj.getParameter('monsterOnWave')) {\n                if ((!this.parameters.currentMonsterCooldown)) {\n                    createSpawn();\n\n                    obj.setParameter('monsterSpawned', obj.getParameter('monsterSpawned') + 1);\n                    this.parameters.currentMonsterCooldown = this.parameters.monsterCooldown;\n\n                } else {\n                    this.parameters.currentMonsterCooldown && this.parameters.currentMonsterCooldown--;\n                }\n            } else {\n                if (obj.getParameter('monsterKilled') >= obj.getParameter('monsterOnWave')) {\n                    obj.setParameter('currentWave', obj.getParameter('currentWave') + 1);\n                    obj.setParameter('monsterSpawned', 0);\n                    obj.setParameter('monsterOnWave', this.parameters.monsterCount[obj.getParameter('currentWave') - 1]);\n                    obj.setParameter('monsterKilled', 0)\n                }\n            }\n            \n            this.leftOnWave.setParameter('text', format(this.leftOnWave.getParameter('template'), {\n                count: obj.getParameter('monsterKilled') + '/' + obj.getParameter('monsterOnWave')\n            }));\n        },\n        parameters: {\n            monsterCount: [10, 25, 50, 75, 100, 150, 200, 500, 1000, 2500, 5000, 10000],\n            monsterCooldown: 10\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/rules/logic.js","import utils from './../../engine/utils';\nimport gameConfigs from '../../configs/index';\n\nvar config = {\n    playerDeath: {\n        update: function () {\n            var obj = this.context;\n\n            if (obj.getParameter('health') <= 0) {\n                obj.layer.state.stopBattle();\n            }\n        }\n    },\n    damageOnPlayerCollision: {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].type == 'player') {\n                    objects[i].setParameter('health', objects[i].getParameter('health') - obj.getParameter('power'));\n                    break;\n                }\n            }\n        }\n    },\n    destroyOnPlayerCollision: {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].type == 'player') {\n                    var explosionConfig = gameConfigs.getConfig('explosion');\n                    explosionConfig.pos = obj.pos.clone();\n\n                    obj.layer.addObject(explosionConfig);\n\n                    obj._removeInNextTick = true;\n                    break;\n                }\n            }\n        }\n    },\n    triggerOnPlayerCollision: {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].type == 'player') {\n                    if (objects[i].getParameter('health') < objects[i].getDefaultParameter('health')) {\n                        if ( objects[i].getParameter('health') + obj.getParameter('power') <= objects[i].getDefaultParameter('health')) {\n                            objects[i].setParameter('health', objects[i].getParameter('health') + obj.getParameter('power'));\n                        } else {\n                            objects[i].setParameter('health', objects[i].getDefaultParameter('health'));\n                        }\n                    }\n\n                    obj._removeInNextTick = true;\n                    break;\n                }\n            }\n        }\n    },\n    meleeAttack : {\n        update: function () {\n            var obj = this.context;\n\n            if (!obj.getParameter('meleeCooldown')) {\n                var objects = obj.getParameter('collisions');\n                for (var i = 0; i < objects.length; i++) {\n                    if (objects[i].type == 'player') {\n                        objects[i].setParameter('health', objects[i].getParameter('health') - obj.getParameter('power'));\n\n                        var blood = gameConfigs.getConfig('bloodSpray');\n                        blood.pos = objects[i].pos.clone();\n                        blood.pos.x += 2;\n                        blood.pos.y += - 10;\n                        obj.layer.addObject(blood);\n\n                        obj.setParameter('meleeCooldown', obj.getParameter('cooldown'));\n                        break;\n                    }\n                }\n            }\n        }\n    },\n    monsterExplosion: {\n        update: function () {\n            var obj = this.context;\n\n            if (!obj.getParameter('exploded')) {\n                var objects = obj.getParameter('collisions');\n                for (var i = 0, l = objects.length; i < l; i++) {\n                    if (objects[i].getParameter('health')) {\n                        objects[i].setParameter('health', objects[i].getParameter('health') - obj.getParameter('power'));\n                        break;\n                    }\n                }\n\n                obj.setParameter('exploded', true);\n            }\n        }\n    },\n    monsterExplosionCondition : {\n        update: function () {\n            var obj = this.context;\n\n            function generateExplosions() {\n                var pos = obj.pos.clone(),\n                    explosionConfig,\n                    power = obj.getParameter('power'),\n                    expl;\n\n                obj._removeInNextTick = true;\n\n                explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(pos.x - obj.size[0], pos.y - obj.size[1]);\n                expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', power);\n\n                explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(pos.x + obj.size[0], pos.y - obj.size[1]);\n                expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', power);\n\n                explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(pos.x - obj.size[0], pos.y + obj.size[1]);\n                expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', power);\n\n                explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(pos.x + obj.size[0], pos.y + obj.size[1]);\n                expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', power);\n\n                explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(pos.x - 3 / 2 * obj.size[0], pos.y);\n                expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', power);\n\n                explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(pos.x + 3 / 2 * obj.size[0], pos.y);\n                expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', power);\n            }\n\n            if (obj.getParameter('health') <= 0) {\n                generateExplosions();\n            } else {\n                var objects = obj.getParameter('collisions');\n                for (var i = 0; i < objects.length; i++) {\n                    if (objects[i].type == 'player') {\n                        generateExplosions();\n\n                        break;\n                    }\n                }\n            }\n        }\n    },\n    stopOnCollisionWithPlayer: {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0, l = objects.length; i < l; i++) {\n                if (objects[i].type == 'player') {\n                    obj.setParameter('speed', 0);\n                    break;\n                }\n            }\n        }\n    },\n    resetSpeed : {\n        update: function () {\n            var obj = this.context;\n\n            obj.setParameter('speed', obj.getDefaultParameter('speed'));\n        }\n    },\n    resetEffects : {\n        update: function () {\n            var obj = this.context;\n\n            obj.getParameter('effects').splice(0);\n        }\n    },\n    moveToDirection: {\n        update: function (dt) {\n            var obj = this.context;\n            var direction = obj.getParameter('direction');\n\n            if (direction) {\n                obj.setPosition(utils.moveWithSpeed(obj.pos, direction,  obj.getParameter('speed') * dt));\n            }\n        }\n    },\n    playerLevelUp: {\n        update: function () {\n            var obj = this.context;\n            var levelExp = obj.getParameter('levelTable')[obj.getParameter('level')];\n\n            if (obj.getParameter('levelTable')[obj.getParameter('level')]) {\n                if (obj.getParameter('exp') > obj.getParameter('levelTable')[obj.getParameter('level')]) {\n                    obj.setParameter('exp', obj.getParameter('exp') - levelExp);\n                    obj.setParameter('level', obj.getParameter('level') + 1);\n                    obj.setParameter('spellPower', obj.getParameter('spellPower') + 1);\n                }\n            } else {\n                obj.setParameter('level', 'MAX');\n            }\n        }\n    },\n    monsterHealthStatus: {\n        update: function () {\n            var obj = this.context;\n\n            if (obj.getParameter('health') <= 0) {\n                obj._removeInNextTick = true;\n\n                var explosionConfig = gameConfigs.getConfig('explosion');\n                explosionConfig.pos = obj.pos.clone();\n\n                obj.layer.addObject(explosionConfig);\n\n                var blood = gameConfigs.getConfig('blood');\n                blood.pos = obj.pos.clone();\n                obj.layer.addObject(blood);\n\n                if (!obj.layer.state.parameters.monstersKilled) {\n                    obj.layer.state.parameters.monstersKilled = 0;\n                }\n\n                var monsterController = obj.layer.getObjectsByType('monsterController')[0];\n                monsterController.setParameter('monsterKilled', monsterController.getParameter('monsterKilled') + 1);\n\n                obj.layer.state.parameters.monstersKilled++;\n\n                var player = obj.layer.getObjectsByType('player')[0];\n                player.setParameter('exp', player.getParameter('exp') + obj.getParameter('exp'));\n            }\n        }\n    },\n    resetRangeCooldown: {\n        update: function () {\n            var obj = this.context;\n            var fireCooldown = obj.getParameter('fireCooldown');\n\n            fireCooldown && obj.setParameter('fireCooldown', fireCooldown -1);\n        }\n    },\n    resetMeleeCooldown: {\n        update: function () {\n            var obj = this.context;\n            var meleeCooldown = obj.getParameter('meleeCooldown');\n\n            meleeCooldown && obj.setParameter('meleeCooldown', meleeCooldown - 1);\n        }\n    },\n    monsterBossLogic: {\n        update : function() {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n\n            if (!obj.getParameter('fireCooldown')) {\n                var\tbulletConfig = gameConfigs.getConfig('mbullet');\n                var direction = Phaser.Point.subtract(player.pos, obj.pos);\n\n                bulletConfig.pos = obj.pos.clone();\n                var bull = obj.layer.addObject(bulletConfig);\n                bull.setParameter('direction', direction);\n\n                bull.sprite.setDegree(obj.pos.angle(player.pos));\n\n                obj.setParameter('fireCooldown', obj.getParameter('cooldown'));\n            }\n        }\n    },\n    monsterBoss2Logic : {\n        update : function(dt) {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n            var directionToPlayer = obj.getParameter('direction');\n\n            if (Phaser.Point.distance(obj.pos, player.pos) < obj.getParameter('fireRange')) {\n                if (!obj.getParameter('fireCooldown')) {\n                    var\tbulletConfig = gameConfigs.getConfig('mbullet2');\n                    bulletConfig.pos = obj.pos.clone();\n\n                    var bull = obj.layer.addObject(bulletConfig);\n\n                    bull.setParameter('direction', directionToPlayer);\n\n                    obj.setParameter('fireCooldown', obj.getParameter('cooldown'));\n                }\n            } else {\n                obj.setPosition(utils.moveWithSpeed(obj.pos, directionToPlayer, obj.getParameter('speed') * dt));\n            }\n        }\n    },\n    monsterBoss2Bullet : {\n        update: function() {\n            var obj = this.context;\n            var cooldown = obj.getParameter('cooldown');\n            var objects = obj.getParameter('collisions');\n\n            if (cooldown == 0) {\n                obj._removeInNextTick = true;\n\n                createExplosion();\n                return;\n            } else {\n                obj.setParameter('cooldown', cooldown - 1);\n            }\n\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].type == 'player') {\n                    obj._removeInNextTick = true;\n\n                    createExplosion();\n                    break;\n                }\n            }\n\n            function createExplosion() {\n                var pos = obj.pos.clone();\n                var explosionConfig;\n                var power = obj.getParameter('power');\n                var expl;\n\n                explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(pos.x, pos.y);\n                expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', power);\n            }\n        }\n    },\n    moveWithKeyboard: {\n        update: function () {\n            var obj = this.context;\n            var pos = obj.pos.clone();\n            var direction = {};\n\n            direction.left = obj.layer.game.input.keyboard.isDown(65);\n            direction.up = obj.layer.game.input.keyboard.isDown(87);\n            direction.down = obj.layer.game.input.keyboard.isDown(83);\n            direction.right = obj.layer.game.input.keyboard.isDown(68);\n\n            if (direction.right) {\n                pos.x = obj.pos.x + 1;\n            }\n            if (direction.left) {\n                pos.x = obj.pos.x - 1   ;\n            }\n            if (direction.down) {\n                pos.y = obj.pos.y + 1;\n            }\n            if (direction.up) {\n                pos.y = obj.pos.y - 1;\n            }\n\n            if (obj.pos.x == pos.x && obj.pos.y == pos.y) {\n                obj.setParameter('direction', null);\n            } else {\n                obj.setParameter('direction', Phaser.Point.subtract(pos, obj.pos));\n            }\n        }\n    },\n    selectSpellWithKeyboard: {\n        update: function () {\n            var obj = this.context;\n\n            (obj.layer.game.input.keyboard.isDown(49)) && (obj.setParameter('currentSpell', 'fireball'));\n            (obj.layer.game.input.keyboard.isDown(50)) && (obj.setParameter('currentSpell', 'hellfire'));\n            (obj.layer.game.input.keyboard.isDown(51)) && (obj.setParameter('currentSpell', 'frostShard'));\n            (obj.layer.game.input.keyboard.isDown(52)) && (obj.setParameter('currentSpell', 'teleport'));\n        }\n    },\n    triggerOnPlayerCollisionPowerUp : {\n        update: function () {\n            var obj = this.context;\n            var objects = obj.getParameter('collisions');\n\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].type == 'player') {\n                    //objects[i].setParameter('spellPower', objects[i].getParameter('spellPower') + obj.getParameter('power'));\n                    objects[i].setParameter('exp', objects[i].getParameter('exp') + obj.getParameter('exp'));\n                    obj._removeInNextTick = true;\n                    break;\n                }\n            }\n        }\n    },\n    summonOnCooldown : {\n        update: function() {\n            var obj = this.context;\n            var cooldown = obj.getParameter('cooldown');\n\n            function getProperMonster() {\n                var random = Math.random() * 100;\n                var config;\n\n                if (random <= obj.getParameter('chanceOfBoss')) {\n                    config = gameConfigs.getConfig('monsterBoss');\n                } else {\n                    random -= obj.getParameter('chanceOfBoss');\n                }\n\n                if (!config && random <= obj.getParameter('chanceOfBoss2')) {\n                    config = gameConfigs.getConfig('monsterBoss2');\n                } else {\n                    random -= obj.getParameter('chanceOfBoss2');\n                }\n\n                if (!config && random <= obj.getParameter('chanceOfBoomer')) {\n                    config = gameConfigs.getConfig('monsterBoomer');\n                } else {\n                    random -= obj.getParameter('monsterBoomer');\n                }\n\n                if (!config) {\n                    config = gameConfigs.getConfig('monster');\n                }\n\n                return config;\n            }\n            if (cooldown == 0) {\n                let monsterConfig = getProperMonster();\n                let player = obj.layer.getObjectsByType('player')[0];\n\n                monsterConfig.pos = obj.pos.clone();\n\n                var monster = obj.layer.addObject(monsterConfig);\n\n                if (player.getParameter('level') > 1) {\n                    monster.setParameter('health', monster.getParameter('health') * 0.75 * player.getParameter('level'));\n                }\n\n                obj._removeInNextTick = true;\n            } else {\n                obj.setParameter('cooldown', cooldown - 1);\n            }\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/rules/units.js","import gameConfigs from '../../configs/index';\n\nvar config = {\n    random_trees: {\n        init: function() {\n            var obj = this.context;\n\n            function getRandomPointInArea() {\n                return [Math.round(Math.random() * obj.size[0]), Math.round(Math.random() * obj.size[1])];\n            }\n\n            for (let i = 0; i < this.parameters.trees; i++) {\n                let config = gameConfigs.getConfig('tree' + (Math.round(Math.random()) + 1));\n\n                let point = getRandomPointInArea(this.parameters.area);\n                config.pos = new Phaser.Point(point[0], point[1]);\n\n                this.context.addObject(config);\n            }\n\n            for (let i = 0; i < this.parameters.stones; i++) {\n                let config = gameConfigs.getConfig('stones');\n                let point = getRandomPointInArea(this.parameters.area);\n                config.pos = new Phaser.Point(point[0], point[1]);\n\n                /*var stone = */this.context.addObject(config);\n                //stone.sprite.setDegree(utils.getDegree(obj.pos, getRandomPointInArea(this.parameters.area))[0]);\n            }\n\n        },\n        parameters: {\n            trees: 100,\n            stones: 100\n        }\n    },\n    spawn_heart: {\n        update: function () {\n            if (!this.parameters.currentCooldown) {\n                var config = gameConfigs.getConfig('heart');\n                const rect = new Phaser.Rectangle(50, 50, 1104, 868);\n                config.pos = new Phaser.Point(rect.randomX, rect.randomY);\n\n                this.context.addObject(config);\n\n                this.parameters.currentCooldown = this.parameters.cooldown;\n\n            } else {\n                this.parameters.currentCooldown--;\n            }\n\n        },\n        parameters: {\n            area: [[50, 50], [1154, 918]],\n            cooldown: 400\n        }\n    },\n    spawn_powerup: {\n        update: function () {\n            if (!this.parameters.currentCooldown) {\n                var config = gameConfigs.getConfig('powerup');\n\n                const rect = new Phaser.Rectangle(100, 100, 1000, 750);\n                config.pos = new Phaser.Point(rect.randomX, rect.randomY);\n\n                this.context.addObject(config);\n\n                this.parameters.currentCooldown = this.parameters.cooldown;\n\n            } else {\n                this.parameters.currentCooldown--;\n            }\n\n        },\n        parameters: {\n            area: [[100, 100], [1100, 850]],\n            currentCooldown : 1100,\n            cooldown: 1100\n        }\n    },\n    spawn_terrain: {\n        init: function() {\n            var gateConfig = gameConfigs.getConfig('gate'),\n                wallConfig;\n\n            for (var i = 0; i < 7; i++) {\n                wallConfig = gameConfigs.getConfig('wall');\n                wallConfig.pos = [wallConfig.size[0] * i + wallConfig.size[0] / 2, wallConfig.size[1]/2];\n                var wall = this.context.addObject(wallConfig);\n                //stone.sprite.setDegree(utils.getDegree(obj.pos, getRandomPointInArea(this.parameters.area))[0]);\n            }\n            gateConfig.pos = [wallConfig.pos.x + wallConfig.size[0]/ 2 + gateConfig.size[0]/2, (gateConfig.size[1] - 3)/2 ];\n            var gate = this.context.addObject(gateConfig);\n        }\n    },\n    goWithPlayer: {\n        update: function(dt) {\n            var obj = this.context;\n            var player = obj.getObjectsByType('player')[0];\n            var px = (player.pos.x + obj.translate.x) / 1024 * 100;\n            var py = (player.pos.y + obj.translate.y) / 768 * 100;\n\n            if (px < 30) {\n                if (obj.translate.x < 0) {\n                    obj.translate.x += Math.round(player.getParameter('speed') * dt);\n                }\n            }\n            if (px > 70) {\n                if (obj.translate.x > - 300) {\n                    obj.translate.x -= Math.round(player.getParameter('speed') * dt);\n                }\n            }\n\n            if (py < 25) {\n                if (obj.translate.y < 0) {\n                    obj.translate.y += Math.round(player.getParameter('speed') * dt);\n                }\n            }\n            if (py > 75) {\n                if (obj.translate.y > - 300) {\n                    obj.translate.y -= Math.round(player.getParameter('speed') * dt);\n                }\n            }\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/rules/layers.js","import utils from './../../engine/utils';\nimport format from 'string-template';\n\nvar config = {\n    countMonsterKilled : {\n        update: function () {\n            var obj = this.context;\n            var template = obj.getParameter('template');\n\n            obj.setParameter('text', format(template, {\n                kills: obj.layer.state.parameters.monstersKilled || 0\n            }));\n        }\n    },\n    timer : {\n        update: function () {\n            var obj = this.context;\n            var template = obj.getParameter('template');\n\n            obj.setParameter('text', format(template, {\n                time: ((obj.layer.state.parameters.gameTimer++) / 60).toFixed(2)\n            }));\n        }\n    },\n    health : {\n        update: function () {\n            var obj = this.context;\n            var template = obj.getParameter('template');\n\n            obj.setParameter('text', format(template, {\n                health: obj.layer.getObjectsByType('player')[0].parameters.health\n            }));\n        }\n    },\n    level : {\n        update: function () {\n            var obj = this.context;\n            var template = obj.getParameter('template');\n            var player = obj.layer.getObjectsByType('player')[0];\n\n            obj.setParameter('text', format(template, {\n                level: player.getParameter('level'),\n                exp: player.getParameter('exp'),\n                levelExp : player.getParameter('levelTable')[player.getParameter('level')]\n            }));\n        }\n    },\n    bestTime : {\n        init: function () {\n            var obj = this.context;\n            var template = obj.getParameter('template');\n\n            obj.setParameter('text', format(template, {\n                time: ((obj.layer.state.parameters.bestTime) / 60).toFixed(2)\n            }));\n        }\n    },\n    bestScore : {\n        init: function () {\n            var obj = this.context;\n            var template = obj.getParameter('template');\n\n            obj.setParameter('text', format(template, {\n                score: obj.layer.state.parameters.bestScore\n            }));\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/rules/ui.js","import utils from './../../engine/utils';\nimport gameConfigs from '../../configs/index';\n\nvar config = {\n    bindPositionToLayer: {\n        update: function () {\n            var obj = this.context;\n\n            if (obj.pos.x - obj.sprite.size[0] / 2 < obj.layer.pos.x) {\n                obj.pos.x = obj.sprite.size[0] / 2;\n            }\n            else if (obj.pos.x + obj.sprite.size[0] / 2 > obj.layer.pos.x + obj.layer.size[0]) {\n                obj.pos.x  = obj.layer.pos.x  + obj.layer.size[0] - obj.sprite.size[0] / 2 ;\n            }\n\n            if (obj.pos.y - obj.sprite.size[1] / 2 < obj.layer.pos.y) {\n                obj.pos.y = obj.sprite.size[1] / 2;\n            }\n            else if (obj.pos.y + obj.sprite.size[1] / 2 > obj.layer.pos.y + obj.layer.size[1]) {\n                obj.pos.y = obj.layer.pos.y + obj.layer.size[1] - obj.sprite.size[1] / 2;\n            }\n        }\n    },\n    destroyAfterLeavingLayer: {\n        update: function () {\n            var obj = this.context;\n\n            if (obj.pos.y < -100 || obj.pos.y - obj.sprite.size[1] - 100> obj.layer.pos.y + obj.layer.size[1] || obj.pos.x - obj.sprite.size[0] - 100> obj.layer.pos.x + obj.layer.size[0] || obj.pos.x < -100) {\n                obj._removeInNextTick = true;\n                return false;\n            }\n        }\n    },\n    setDirectionToPlayer: {\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n\n            obj.setParameter('direction', Phaser.Point.subtract(player.pos, obj.pos));\n        }\n    },\n    setDirectionToPlayerAdvance: {\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n            var playerDirection = player.getParameter('direction');\n            var oldDirection = obj.getParameter('direction');\n\n            if (!oldDirection) {\n                oldDirection = Phaser.Point.subtract(player.pos, obj.pos);\n            }\n\n            if (playerDirection == null) {\n                obj.setParameter('direction', Phaser.Point.subtract(player.pos, obj.pos));\n            } else {\n                let speed = Math.abs(Math.min(player.getParameter('speed'), Phaser.Point.distance(obj.pos, player.pos)) - 10);\n                let playerNextPlace = utils.moveWithSpeed(player.pos, playerDirection, speed);\n                let _dv = Phaser.Point.subtract(playerNextPlace, obj.pos).normalize();\n                let _odv = oldDirection.clone().normalize();\n                let _ndv = Phaser.Point.add(_odv, _dv).normalize();\n\n                obj.setParameter('direction', _ndv);\n            }\n        }\n    },\n    wandererAI : {\n        init: function () {\n            const rect = new Phaser.Rectangle(100, 100, 1000, 750);\n            this.context.setParameter('direction', new Phaser.Point(rect.randomX, rect.randomY));\n        },\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n            var distance = Phaser.Point.distance(obj.pos, player.pos);\n\n            if (distance <= obj.getParameter('scentRange')) {\n                obj.setParameter('scent', true);\n                obj.setParameter('speed', obj.getDefaultParameter('scentSpeed'));\n                obj.setParameter('wanderCooldown', 0);\n                obj.setParameter('direction', Phaser.Point.subtract(player.pos, obj.pos));\n            } else {\n                obj.setParameter('speed', obj.getDefaultParameter('speed'));\n                if (!obj.getParameter('wanderCooldown')) {\n                    const rect = new Phaser.Rectangle(100, 100, 1000, 750);\n                    obj.setParameter('direction', Phaser.Point.subtract(new Phaser.Point(rect.randomX, rect.randomY), obj.pos));\n                    obj.setParameter('wanderCooldown', Math.round(Math.random() * (obj.getDefaultParameter('wanderCooldown') - 100) + 100));\n                } else {\n                    obj.getParameter('wanderCooldown') && obj.setParameter('wanderCooldown', obj.getParameter('wanderCooldown') - 1);\n                }\n            }\n        }\n    },\n    dynamicZIndex: {\n        update: function() {\n            var obj = this.context;\n            var newZIndex = 0;\n\n            obj.pos && (newZIndex += obj.pos.y);\n            obj.sprite && (newZIndex += obj.sprite.size[1] / 2);\n\n            obj.zIndex = (obj.pos.y > 0) ? Math.round(newZIndex) : 0;\n        }\n    },\n    collisions: {\n        init: function() {\n            var obj = this.context;\n            var collisions = obj.setParameter('collisions', []);\n\n            collisions.cells = new Array();\n            obj.layer.state.collisions.updateObject(obj);\n        },\n        update: function() {\n            var obj = this.context;\n\n            obj.getParameter('collisions').splice(0);\n            obj.layer.state.collisions.updateObject(obj);\n        }\n    },\n    rotateToMouse: {\n        update: function () {\n            var obj = this.context;\n            var destination  = new Phaser.Point(obj.layer.game.input.mousePointer.x, obj.layer.game.input.mousePointer.y);\n\n            destination.x -= obj.layer.translate.x;\n            destination.y -= obj.layer.translate.y;\n\n            var directionToMouse = Phaser.Point.subtract(destination, obj.pos);\n            obj.sprite.rotateToDirection(directionToMouse);\n        }\n    },\n    bindPositionToMouse: {\n        update : function() {\n            var obj = this.context;\n            var mousePosition = new Phaser.Point(obj.layer.game.input.mousePointer.x, obj.layer.game.input.mousePointer.y);\n\n            obj.setPosition(mousePosition.clone());\n        }\n    },\n    removeOnCooldown: {\n        update : function() {\n            var obj = this.context;\n            var cooldown = obj.getParameter('cooldown');\n\n            if (cooldown == 0) {\n                obj._removeInNextTick = true;\n            } else {\n                obj.setParameter('cooldown', cooldown - 1);\n            }\n        }\n    },\n    explosionOnCooldown: {\n        update: function() {\n            var obj = this.context;\n            var cooldown = obj.getParameter('cooldown');\n\n            if (cooldown == 0) {\n                obj._removeInNextTick = true;\n\n                var explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(obj.pos.x, obj.pos.y);\n                var expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', obj.getParameter('power'));\n\n            } else {\n                obj.setParameter('cooldown', cooldown - 1);\n            }\n        }\n    },\n    explosionAfterSpriteDone: {\n        update : function () {\n            var obj = this.context;\n\n            if(obj.sprite.done) {\n                obj._removeInNextTick = true;\n\n                var explosionConfig = gameConfigs.getConfig('monsterExplosion');\n                explosionConfig.pos = new Phaser.Point(obj.pos.x, obj.pos.y);\n                var expl = obj.layer.addObject(explosionConfig);\n                expl.setParameter('power', obj.getParameter('power'));\n            }\n        }\n    },\n    destroyAfterSpriteDone: {\n        update : function () {\n            var obj = this.context;\n\n            if(obj.sprite.done) {\n                obj._removeInNextTick = true;\n            }\n        }\n    },\n    rotateByDirection: {\n        update: function () {\n            var obj = this.context;\n\n            obj.sprite.rotateToDirection(obj.getParameter('direction'));\n        }\n    },\n    rotateByPlayer: {\n        update: function () {\n            var obj = this.context;\n            var player = obj.layer.getObjectsByType('player')[0];\n\n            obj.sprite.rotateToDirection(Phaser.Point.subtract(player.pos, obj.pos));\n        }\n    }\n};\n\nexport default config;\n\n\n// WEBPACK FOOTER //\n// src/js/configs/rules/etc.js","import utils from '../utils';\nimport renders from '../renderers';\nimport Sprite from '../sprite';\nimport gameConfigs from '../../configs';\n\nimport GameRule from './rule';\n\n\nexport default class GameObject {\n  constructor(config) {\n    this.layer = config.layer;\n    if (config.pos instanceof Phaser.Point) {\n      this.pos = config.pos.clone();\n    } else {\n      if (config.pos) {\n        this.pos = new Phaser.Point(config.pos[0], config.pos[1]);\n      } else {\n        this.pos = new Phaser.Point();\n      }\n    }\n    this.id = config.id;\n\n    if (config.sprite) {\n      this.sprite = new Sprite(this.layer.game.cache, config.sprite[0], config.sprite[1], config.sprite[2], config.sprite[3], config.sprite[4], config.sprite[5], config.sprite[6], config.sprite[7]);\n    }\n\n    this.type = config.type;\n\n    if (config.size || this.sprite) {\n      this.size = config.size || this.sprite.size;\n    }\n\n    this.collisions = config.collisions;\n    this.callbacks = config.callbacks || {};\n    this.zIndex = config.zIndex || 0;\n    const _parameters = config.parameters || {};\n    const parameters = (config.parameters && utils.clone(config.parameters)) || {};\n\n    this.size = config.size;\n\n    this.getParameter = function (id) {\n      return parameters[id];\n    };\n    this.setParameter = function (id, value) {\n      parameters[id] = value;\n      return parameters[id];\n    };\n    this.getDefaultParameter = function (id) {\n      return _parameters[id];\n    };\n\n    this.rules = config.rules || [];\n    this.conditions = config.conditions || [];\n    this._update = config.update;\n\n    if (config.render) {\n      if (renders[config.render]) {\n        this.customRender = renders[config.render];\n      } else {\n        this.customRender = config.render;\n      }\n    } else {\n      if (config.render === false) {\n        this.noRender = true;\n      }\n    }\n\n    this._init = config.init;\n\n    this.inited = false;\n  }\n\n  render(dt) {\n    if (!this.noRender) {\n      if (this.customRender) {\n        if (Array.isArray(this.customRender)) {\n          this.customRender.forEach(renderer => renderer(this, dt));\n        } else {\n          this.customRender(this, dt);\n        }\n      } else {\n        renders.sprite(this, dt);\n      }\n    }\n  }\n\n  init() {\n    if (!this.inited) {\n      const rules = this.rules;\n      const conditions = this.conditions;\n\n      this.rules = [];\n      this.conditions = [];\n\n      this._init && this._init();\n\n      if (this.collisions) {\n        this.collisions = new GameRule(gameConfigs.getRuleConfig('collisions'));\n        this.collisions.setContext(this);\n        this.collisions.init();\n      }\n\n      for (let i = 0, l = rules.length; i < l; i++) {\n        this.addRule(gameConfigs.getRuleConfig(rules[i]));\n      }\n\n      for (let i = 0, l = conditions.length; i < l; i++) {\n        this.addCondition(gameConfigs.getRuleConfig(conditions[i]));\n      }\n\n      this.inited = true;\n    }\n  }\n\n  update(dt) {\n    this._update && this._update();\n    this.rules.forEach(rule => rule.update(dt));\n  }\n\n  updateConditions(dt) {\n    this.conditions.forEach(condition => condition.update(dt));\n  };\n\n  setPosition(point) {\n    this.pos.x = point.x;\n    this.pos.y = point.y;\n  }\n\n  addRule(config) {\n    const rule = new GameRule(config);\n    rule.setContext(this);\n    rule.init();\n\n    this.rules.push(rule);\n  }\n\n  addCondition(config) {\n    const condition = new GameRule(config);\n    condition.setContext(this);\n    condition.init();\n\n    this.conditions.push(condition);\n  }\n\n  updateCollisions(dt) {\n    this.collisions && this.collisions.update(dt, this);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/js/engine/core/object.js","function fog(obj) {\n    const ctx = obj.layer.ctx;\n    const x = obj.layer.getObjectsByType('player')[0].pos.x;\n    const y = obj.layer.getObjectsByType('player')[0].pos.y;\n    const grad = obj.layer.ctx.createRadialGradient(x, y, 0, x, y, 700);\n\n    grad.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grad.addColorStop(1, 'rgba(0, 0, 0, 0.97)');\n    ctx.fillStyle = grad;\n\n    ctx.beginPath();\n    ctx.arc(x, y, 2000, 0, Math.PI * 2, false);\n    ctx.closePath();\n\n    ctx.fill();\n}\n\nfunction healthBar(obj) {\n    const ctx = obj.layer.ctx;\n    const x = Math.round(- obj.sprite.size[0] / 2 );\n    const y = Math.round(- obj.sprite.size[1] / 2 - 7);\n    const width = obj.sprite.size[0];\n    const height = 3;\n\n    ctx.globalAlpha = 0.5;\n\n    if ((obj.getParameter('health') > 0) && (obj.getDefaultParameter('health') > obj.getParameter('health'))) {\n        ctx.fillStyle = \"rgb(250, 0, 0)\";\n        ctx.fillRect(x, y, width, height);\n\n        ctx.fillStyle = \"rgb(0, 250, 0)\";\n        ctx.fillRect(x, y, Math.round(width * (obj.getParameter('health') / obj.getDefaultParameter('health'))), height);\n    }\n\n    ctx.globalAlpha = 1;\n}\n\nfunction expBar(obj) {\n    const x = -22;\n    const y = 17;\n    const width = 200;\n    const height = 40;\n    const ctx = obj.layer.ctx;\n    const player = obj.layer.getObjectsByType('player')[0];\n\n    ctx.translate(-obj.layer.translate.x, -obj.layer.translate.y);\n\n    ctx.globalAlpha = 0.3;\n    ctx.fillStyle = \"rgb(220, 220, 220)\";\n    ctx.fillRect(x, y, width, height);\n\n    ctx.globalAlpha = 1;\n    ctx.fillStyle = \"#DAA520\";\n    if ( player.getParameter('levelTable')[player.getParameter('level')] ) {\n        ctx.fillRect(x, y, Math.min(width, Math.round(width * (player.getParameter('exp') / player.getParameter('levelTable')[player.getParameter('level')]))), height);\n    } else {\n        ctx.fillRect(x, y, width, height);\n    }\n\n    ctx.translate(obj.layer.translate.x, obj.layer.translate.y);\n\n    textRender(obj);\n}\n\nfunction sprite(obj, dt) {\n    const ctx = obj.layer.ctx;\n\n    ctx.globalAlpha = 1;\n    obj.sprite.update(dt);\n    obj.sprite.render(ctx);\n}\n\nfunction ellipse(context, cx, cy, rx, ry, rot, aStart, aEnd){\n    context.save();\n\n    context.translate(cx, cy);\n    context.rotate(rot);\n    context.translate(-rx, -ry);\n\n    context.scale(rx, ry);\n    context.arc(1, 1, 1, aStart, aEnd, false);\n\n    context.restore();\n}\n\nfunction shadow(obj) {\n    if (obj.size) {\n        const ctx = obj.layer.ctx;\n\n        ctx.globalAlpha = 0.5;\n\n        ctx.beginPath();\n        ellipse(ctx, 0, + obj.sprite.size[1] / 2 - 3, Math.min(obj.sprite.size[0], obj.size[0]) / 2 + 8, 5, 0, 0, 2 * Math.PI);\n        ctx.fillStyle = 'black';\n        ctx.fill();\n\n        ctx.globalAlpha = 1;\n    }\n}\n\nfunction effects(obj) {\n    const ctx = obj.layer.ctx;\n    const effects = obj.getParameter('effects');\n\n    for (let i = 0; i < effects.length; i++) {\n        const effect = effects[i];\n        if (effect === 'frozen') {\n            ctx.globalAlpha = 0.8;\n            ctx.drawImage(obj.layer.game.cache.getImage('frostEffect'), -16, + (obj.sprite.size[1] / 2) - 32, 32, 32);\n            ctx.globalAlpha = 1;\n        }\n    }\n}\n\nfunction objectRenderer(obj, dt) {\n    shadow(obj);\n    sprite(obj, dt);\n}\n\nfunction unitRenderer(obj, dt) {\n    shadow(obj);\n    healthBar(obj);\n    sprite(obj, dt);\n    effects(obj);\n}\n\nfunction spellRenderer(obj, dt) {\n    const ctx = obj.layer.ctx;\n    const x = Math.round(- obj.sprite.size[0] / 2 - 4);\n    const y = Math.round(- obj.sprite.size[1] / 2 - 4);\n    const width = obj.sprite.size[0] + 8;\n    const height = obj.sprite.size[1] + 8;\n\n    ctx.translate(-obj.layer.translate.x, -obj.layer.translate.y);\n\n    if (obj.id.indexOf(obj.layer.getObjectsByType('player')[0].getParameter('currentSpell')) !== -1) {\n        ctx.fillStyle = \"rgb(0, 250, 0)\";\n        ctx.fillRect(x - 2, y - 2, width + 4, height + 4);\n    }\n\n    ctx.globalAlpha = 0.4;\n    ctx.fillStyle = \"rgb(0, 0, 0)\";\n\n    ctx.fillRect(x, y, width, height);\n\n    ctx.fillStyle = \"rgb(0, 0, 0)\";\n    ctx.fillRect(x, y, width, height);\n\n    ctx.globalAlpha = 1;\n\n    sprite(obj, dt);\n\n    if (obj.getParameter('fireCooldown') > 0) {\n        ctx.globalAlpha = 0.8;\n        ctx.fillStyle = \"rgb(20, 20, 20)\";\n        ctx.fillRect(x, Math.round(y + height - height * (obj.getParameter('fireCooldown') / obj.getParameter('cooldown'))), width, height);\n        ctx.globalAlpha = 1;\n    }\n\n    ctx.translate(obj.layer.translate.x, obj.layer.translate.y);\n}\n\nfunction ui(obj, dt) {\n    const ctx = obj.layer.ctx;\n\n    ctx.translate(-obj.layer.translate.x, -obj.layer.translate.y);\n    sprite(obj, dt);\n    ctx.translate(obj.layer.translate.x, obj.layer.translate.y);\n}\n\nfunction textRender(obj) {\n    const ctx = obj.layer.ctx;\n    let fontConfig = '';\n\n    ctx.translate(-obj.layer.translate.x, -obj.layer.translate.y);\n\n    (obj.getParameter('style')) && (fontConfig += obj.getParameter('style') + \" \");\n    (obj.getParameter('weight')) && (fontConfig += obj.getParameter('weight') + \" \");\n    \n    fontConfig += (obj.getParameter('size') || 30) + 'pt ';\n    fontConfig += (obj.getParameter('font') || \"Arial\");\n\n    if (obj.getParameter('align')) {\n        ctx.textAlign = obj.getParameter('align');\n    }\n\n    ctx.font = fontConfig;\n    ctx.fillStyle = obj.getParameter('color') || \"#FFF\";\n    ctx.fillText(obj.getParameter('text'), obj.pos.x, obj.pos.y);\n\n    ctx.translate(obj.layer.translate.x, obj.layer.translate.y);\n}\n\nconst renders = {\n    shadow,\n    fog,\n    expBar,\n    healthBar,\n    sprite,\n    effects,\n    ui,\n    object : objectRenderer,\n    text: textRender,\n    spell : spellRenderer,\n    unit: unitRenderer\n};\n\nexport default renders;\n\n\n// WEBPACK FOOTER //\n// src/js/engine/renderers.js","import utils from './utils';\n\nclass Sprite {\n  constructor(cache, url, pos, size, speed, frames, dir, once, degree) {\n    this.cache = cache;\n    if (pos instanceof Phaser.Point) {\n      this.pos = pos.clone();\n    } else {\n      this.pos = new Phaser.Point(pos[0], pos[1]);\n    }\n    this.defaultPosition = this.pos.clone();\n    this.size = size;\n    this.speed = typeof speed === 'number' ? speed : 0;\n    this.frames = utils.clone(frames);\n    this._index = 0;\n    this.url = url;\n    this.dir = dir || 'horizontal';\n    this.once = once;\n    this.degree = degree || 0;\n  }\n\n  update(dt) {\n    this._index += this.speed * dt;\n  }\n\n  setDegree(degree) {\n    this.degree = degree;\n  }\n\n  updateConfig(config) {\n    if (config) {\n      config.pos && (this.pos = config.pos);\n      config.size && (this.size = config.size);\n      config.speed && (this.speed = typeof config.speed === 'number' ? config.speed : 0);\n      config.frames && (this.frames = config.frames);\n      config.url && (this.url = config.url);\n      config.dir && (this.dir = config.dir);\n      config.once && (this.once = config.once);\n      config.degree && (this.degree = config.degree);\n    }\n  }\n\n  rotateToDirection(direction) {\n    const pos = this.defaultPosition;\n    const config = {};\n    const angle = direction.angle(new Phaser.Point(0,0), true);\n\n    if (angle > 135 || angle < -135) {\n      config.pos = [pos.x, pos.y + 2 * this.size[1]]\n    } else if (angle < 135 && angle > 45) {\n      config.pos =[pos.x, pos.y + 3 * this.size[1]]\n    } else if (angle < 45 && angle > -45 ) {\n      config.pos =[pos.x, pos.y + this.size[1]]\n    } else {\n      config.pos =[pos.x, pos.y]\n    }\n\n    config.pos = new Phaser.Point(config.pos[0], config.pos[1]);\n\n    this.updateConfig(config);\n  }\n\n  render(ctx) {\n    let frame;\n    let x = this.pos.x;\n    let y = this.pos.y;\n\n    if (this.speed > 0) {\n      const max = this.frames.length;\n      const idx = Math.floor(this._index);\n\n      frame = this.frames[idx % max];\n\n      if (this.once && idx >= max) {\n        this.done = true;\n        return;\n      }\n    } else {\n      frame = 0;\n    }\n\n    if (this.dir === 'vertical') {\n      y += frame * this.size[1];\n    }\n    else {\n      x += frame * this.size[0];\n    }\n\n    ctx.rotate(this.degree);\n    ctx.drawImage(\n      this.cache.getImage(this.url),\n      x, y,\n      this.size[0], this.size[1],\n      Math.round(-this.size[0] / 2), Math.round(-this.size[1] / 2),\n      this.size[0], this.size[1]\n    );\n  }\n}\n\nexport default Sprite;\n\n\n// WEBPACK FOOTER //\n// src/js/engine/sprite.js"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;ACjBA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;;;;;;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAtBA;;;;;;;;;;;;;;ACHA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACTA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;;AAPA;AACA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;;AA7CA;AACA;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAtCA;AACA;AAwCA;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AApHA;AACA;AAsHA;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAAA;AACA;;;;;;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;;;;;;AA9KA;;;;;;;;;;;;;;;;;;ACPA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAZA;AAnGA;AACA;AAkHA;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AADA;AACA;AAYA;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AATA;AAqBA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AA3IA;AACA;AAsJA;;;;;;;;;;;;;;;;;ACvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAbA;AAeA;AACA;AACA;AACA;AACA;AADA;AAGA;AANA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAHA;AA1DA;AACA;AAgEA;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAXA;AACA;AAkBA;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAVA;AAnEA;AACA;AAgFA;;;;;;;;;;;;;;;;;;ACjFA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChBA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAzCA;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AA7MA;AACA;AAoOA;;;;;;;;;;;;;;;;;;ACxOA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AA/CA;AADA;AACA;AAsDA;;;;;;;;;;;;;;;;;;AC1DA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjDA;AAxYA;AACA;AA4bA;;;;;;;;;;;;;;;;;;AChcA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AA3BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAhBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAjBA;AAuBA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AA5FA;AACA;AA2HA;;;;;;;;;;;;;;;;;;AC9HA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAtDA;AACA;AAiEA;;;;;;;;;;;;;;;;;;ACrEA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAnMA;AACA;AA4MA;;;;;;;;;;;;;;;;;;;;AChNA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;;;;;;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AA1IA;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;;;;;;;;;;;;;;;;;;;;AC/MA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;;;;;;AAGA;;;;A","sourceRoot":""}